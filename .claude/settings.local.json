{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(npm run build:*)",
      "Bash(npm run check:*)",
      "Bash(npm run test:run:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(mkdir:*)",
      "Bash(npm run test:*)",
      "Bash(git checkout:*)",
      "Bash(npm run type-check:*)",
      "Bash(ls:*)",
      "Bash(git mv:*)",
      "Bash(gh pr create:*)",
      "Bash(gh pr view:*)",
      "Bash(git fetch:*)",
      "Bash(git rebase:*)",
      "Bash(git pull:*)",
      "Bash(gh pr:*)",
      "Bash(grep:*)",
      "Bash(npm audit:*)",
      "WebFetch(domain:github.com)",
      "Bash(npx tsc:*)",
      "Bash(gh run view:*)",
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(mv:*)",
      "Bash(rmdir:*)",
      "Bash(cat:*)",
      "Bash(git cherry-pick:*)",
      "Bash(timeout:*)",
      "Bash(true)",
      "Bash(git branch:*)",
      "Bash(npx biome check:*)",
      "Bash(echo:*)",
      "Bash(CI=true npm run test:run)",
      "Bash(gh api:*)",
      "Bash(npx tsx:*)",
      "Bash(rg:*)",
      "Bash(gh run list:*)",
      "Bash(git push:*)",
      "Bash(find:*)",
      "Bash(gh pr create --title \"feat: add search scope functionality for keys/values/all filtering\" --body \"$(cat <<''EOF''\n## Summary\n\n- Add comprehensive search scope functionality allowing users to search specifically in keys, values, or all content\n- Implement Tab key cycling through search scopes: All â†’ Keys â†’ Values â†’ All\n- Add visual scope indicator in SearchBar component with `[All]`, `[Keys]`, `[Values]` display\n- Extend search logic with `searchInJsonWithScope` for targeted filtering\n- Maintain full backward compatibility with existing search behavior\n\n## Key Features\n\n### Search Scope Types\n- **All**: Search in entire JSON content (default, existing behavior)\n- **Keys**: Search only in JSON property names/keys\n- **Values**: Search only in JSON property values\n\n### User Interface\n- Search scope indicator displayed on right side of search bar\n- Current scope highlighted with blue background when \"All\" is selected\n- Updated help text includes \"Tab: scope\" instruction\n\n### Keyboard Controls\n- **Tab**: Cycle through search scopes in both search input mode and navigation mode\n- Works seamlessly with existing keyboard shortcuts (s, n, N, Enter, Esc)\n\n### Technical Implementation\n- `SearchScope` type: `\"all\" | \"keys\" | \"values\"`\n- Extended `SearchState` interface with `searchScope` property\n- New `searchInJsonWithScope()` function for key/value-specific filtering\n- Enhanced `getNextSearchScope()` and `getSearchScopeDisplayName()` utilities\n- Comprehensive test coverage with 39 new tests\n\n## Test Coverage\n\n- **searchUtils.test.ts**: 34 tests covering all search functionality\n- **search.test.ts**: 5 tests for type definitions and interfaces\n- All existing tests continue to pass (296 total tests)\n- Full TypeScript type safety and lint compliance\n\n## Usage\n\n1. Press `s` to start search\n2. Type search term\n3. Press `Tab` to cycle through search scopes\n4. Press `Enter` to execute search\n5. Use `n`/`N` to navigate through results\n\n## Backward Compatibility\n\n- All existing search functionality remains unchanged\n- Default search scope is \"all\" (existing behavior)\n- No breaking changes to existing APIs or user workflows\n\nðŸ¤– Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\")",
      "Bash(NODE_ENV=development npm run dev package.json)",
      "Bash(tsx:*)",
      "Bash(NODE_ENV=development timeout 15s npm run dev package.json)",
      "Bash(NODE_ENV=development timeout 10s npm run dev debug_array_test.json)",
      "Bash(NODE_ENV=development timeout 15s npm run dev debug_array_test.json)",
      "Bash(NODE_ENV=development npx tsx debug_current_issue.ts)",
      "Bash(NODE_ENV=development npx tsx test_tree_view.ts)",
      "Bash(NODE_ENV=development npx tsx test_line_text.ts)",
      "Bash(NODE_ENV=development npx tsx test_tree_view_component.tsx)",
      "Bash(NODE_ENV=development npx tsx test_app_treeview.ts)",
      "Bash(NODE_ENV=development npx tsx final_verification.ts)",
      "Bash(NODE_ENV=development npx tsx debug_key_values.ts)",
      "Bash(NODE_ENV=development npx tsx debug_node_to_line.ts)",
      "Bash(NODE_ENV=development npx tsx final_ultrathink_test.ts)",
      "Bash(NODE_ENV=development npx tsx debug_package_json.ts)",
      "Bash(NODE_ENV=development npx tsx debug_keywords_section.ts)",
      "Bash(NODE_ENV=development npx tsx debug_keywords_expansion.ts)",
      "Bash(NODE_ENV=development npx tsx debug_tree_state.ts)",
      "Bash(NODE_ENV=development npx tsx debug_expand_all.ts)",
      "Bash(NODE_ENV=development npx tsx debug_tree_analysis.ts)",
      "Bash(NODE_ENV=development npx tsx debug_index3_missing.ts)",
      "Bash(NODE_ENV=development npx tsx debug_scrolling_issue.ts)",
      "Bash(NODE_ENV=development npx tsx debug_render_lines.ts)",
      "Bash(NODE_ENV=development npx tsx debug_ui_filtering.ts)",
      "Bash(NODE_ENV=development npx tsx debug_toggle_expansion.ts)",
      "Bash(NODE_ENV=development npx tsx debug_treview_tracing.ts)",
      "Bash(NODE_ENV=development npx tsx debug_selection_fix.ts)",
      "Bash(NODE_ENV=development timeout 10s npm run dev test_real_app.json)",
      "Bash(NODE_ENV=development npx tsx debug_expand_all_simple.ts)",
      "Bash(NODE_ENV=development npx tsx test_navigate_to_keywords.ts)",
      "Bash(NODE_ENV=development npx tsx test_natural_expand_all.ts)",
      "Bash(NODE_ENV=development npx tsx test_user_experience.ts)",
      "Bash(NODE_ENV=development npx tsx test_line_numbers.ts)",
      "Bash(git log:*)",
      "Bash(git reset:*)",
      "Bash(gh issue list:*)",
      "Bash(git rm:*)",
      "Bash(tree:*)",
      "Bash(sed:*)",
      "Bash(npx vitest:*)",
      "Bash(for module in \"useDebug\" \"useUI\" \"useSearch\" \"useNavigation\" \"useJq\" \"useExport\")",
      "Bash(do)",
      "Bash(done)",
      "mcp__serena__list_dir",
      "mcp__serena__replace_regex",
      "mcp__serena__search_for_pattern",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__think_about_whether_you_are_done",
      "mcp__serena__find_file",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__find_symbol",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__write_memory",
      "mcp__serena__list_memories",
      "mcp__serena__read_memory",
      "mcp__serena__check_onboarding_performed"
    ],
    "deny": []
  }
}
